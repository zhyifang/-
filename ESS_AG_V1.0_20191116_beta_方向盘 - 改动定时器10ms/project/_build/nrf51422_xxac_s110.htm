<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf51422_xxac_s110.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf51422_xxac_s110.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Mon Dec 02 19:15:46 2019
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BLE_Init &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[5]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SVC_Handler</a><BR>
 <LI><a href="#[6]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PendSV_Handler</a><BR>
 <LI><a href="#[7]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SysTick_Handler</a><BR>
 <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4a]">__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[4b]">__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4b]">__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us</a><BR>
 <LI><a href="#[48]">__asm___7_myiic_c_delay_us__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[48]">__asm___7_myiic_c_delay_us__nrf_delay_us</a><BR>
 <LI><a href="#[49]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[49]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
 <LI><a href="#[13e]">app_notify_error_state_transit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[140]">sm_state_change</a><BR>
 <LI><a href="#[18a]">cmd_queue_dequeue</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[188]">cmd_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[15]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[d]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from main.o(i.HardFault_Handler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[19]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">RADIO_IRQHandler</a> from nrf_link_core.o(i.RADIO_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[14]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[12]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[18]">RTC1_IRQHandler</a> from app_timer_ble_gzll.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">SPI0_TWI0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[c]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI0_IRQHandler</a> from nrf_notification_manager.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI1_IRQHandler</a> from app_timer_ble_gzll.o(i.SWI1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[20]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[13]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from ep_tick.o(i.TIMER1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from nrf_flywheel.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[a]">UART0_IRQHandler</a> from ep_comm.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[24]">access_data_handler</a> from ep_ble_access.o(i.access_data_handler) referenced from ep_ble_access.o(i.ACCESS_ble_init)
 <LI><a href="#[2f]">async_state_packet_received</a> from nrf_impala.o(i.async_state_packet_received) referenced from nrf_impala.o(i.async_state_rx_enabling)
 <LI><a href="#[2e]">async_state_tx_ack_complete</a> from nrf_impala.o(i.async_state_tx_ack_complete) referenced from nrf_impala.o(i.async_state_packet_received)
 <LI><a href="#[25]">battery_data_handler</a> from ep_ble_battery.o(i.battery_data_handler) referenced from ep_ble_battery.o(i.BATTERY_ble_init)
 <LI><a href="#[25]">battery_data_handler</a> from ep_ble_battery.o(i.battery_data_handler) referenced from ep_ble_battery.o(i.BATTERY_service_init)
 <LI><a href="#[31]">ble_evt_dispatch</a> from ep_ble_init.o(i.ble_evt_dispatch) referenced from ep_ble_init.o(i.ble_stack_init)
 <LI><a href="#[3b]">bsp_button_event_handler</a> from ep_button.o(i.bsp_button_event_handler) referenced from ep_button.o(.constdata)
 <LI><a href="#[34]">conn_params_error_handler</a> from ep_ble_init.o(i.conn_params_error_handler) referenced from ep_ble_init.o(i.conn_params_init)
 <LI><a href="#[43]">data_page_erase_state_run</a> from pstorage.o(i.data_page_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[42]">data_to_swap_write_state_run</a> from pstorage.o(i.data_to_swap_write_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[2d]">detection_delay_timeout_handler</a> from app_button.o(i.detection_delay_timeout_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[38]">device_ack_received</a> from nrf_impala.o(i.device_ack_received) referenced from nrf_impala.o(i.nrf_impl_state_fun_timeslot_start)
 <LI><a href="#[26]">device_info_data_handler</a> from ep_ble_device_info.o(i.device_info_data_handler) referenced from ep_ble_device_info.o(i.DeviceInfo_ble_init)
 <LI><a href="#[3a]">gazell_send_packet_timeout_handler</a> from ep_ble_init.o(i.gazell_send_packet_timeout_handler) referenced from ep_ble_init.o(i.timers_init)
 <LI><a href="#[2c]">gpiote_event_handler</a> from app_button.o(i.gpiote_event_handler) referenced from app_button.o(i.app_button_init)
 <LI><a href="#[45]">head_restore_state_run</a> from pstorage.o(i.head_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[35]">m_radio_callback</a> from ep_timeslot.o(i.m_radio_callback) referenced from ep_timeslot.o(i.gazell_sd_radio_init)
 <LI><a href="#[21]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[27]">motor_data_handler</a> from ep_ble_motor.o(i.motor_data_handler) referenced from ep_ble_motor.o(i.MOTOR_ble_init)
 <LI><a href="#[28]">navig_data_handler</a> from ep_ble_navigation.o(i.navig_data_handler) referenced from ep_ble_navigation.o(i.NAVIG_ble_init)
 <LI><a href="#[28]">navig_data_handler</a> from ep_ble_navigation.o(i.navig_data_handler) referenced from ep_ble_navigation.o(i.NAVIG_service_init)
 <LI><a href="#[36]">notification_cb</a> from nrf_gzll.o(i.notification_cb) referenced from nrf_gzll.o(i.nrf_gzll_init)
 <LI><a href="#[1]">nrf_impl_state_fun_device_send_packet</a> from nrf_impala.o(i.nrf_impl_state_fun_device_send_packet) referenced 2 times from nrf_state_machine.o(.data)
 <LI><a href="#[0]">nrf_impl_state_fun_timeslot_start</a> from nrf_impala.o(i.nrf_impl_state_fun_timeslot_start) referenced 2 times from nrf_state_machine.o(.data)
 <LI><a href="#[37]">nrf_sm_execute</a> from nrf_state_machine.o(i.nrf_sm_execute) referenced from nrf_impala.o(i.nrf_impl_state_fun_device_send_packet)
 <LI><a href="#[37]">nrf_sm_execute</a> from nrf_state_machine.o(i.nrf_sm_execute) referenced 2 times from nrf_impala.o(i.nrf_impl_state_fun_timeslot_start)
 <LI><a href="#[37]">nrf_sm_execute</a> from nrf_state_machine.o(i.nrf_sm_execute) referenced from nrf_impala.o(i.sm_start)
 <LI><a href="#[2b]">on_adv_evt</a> from ep_ble_init.o(i.on_adv_evt) referenced from ep_ble_init.o(i.advertising_init)
 <LI><a href="#[33]">on_conn_params_evt</a> from ep_ble_init.o(i.on_conn_params_evt) referenced from ep_ble_init.o(i.conn_params_init)
 <LI><a href="#[29]">ps_cb_handler</a> from ep_pstorage.o(i.ps_cb_handler) referenced from ep_pstorage.o(i.PSTORAGE_Init)
 <LI><a href="#[39]">softdevice_assertion_handler</a> from softdevice_handler.o(i.softdevice_assertion_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[3e]">state_erase_data_page_entry_run</a> from pstorage.o(i.state_erase_data_page_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[40]">state_restore_head_entry_run</a> from pstorage.o(i.state_restore_head_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3f]">state_restore_tail_entry_run</a> from pstorage.o(i.state_restore_tail_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3c]">state_swap_erase_entry_run</a> from pstorage.o(i.state_swap_erase_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3d]">state_write_data_swap_entry_run</a> from pstorage.o(i.state_write_data_swap_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[2a]">steer_data_handler</a> from ep_ble_steer.o(i.steer_data_handler) referenced from ep_ble_steer.o(i.STEER_ble_init)
 <LI><a href="#[41]">swap_erase_state_run</a> from pstorage.o(i.swap_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[32]">sys_evt_dispatch</a> from ep_ble_init.o(i.sys_evt_dispatch) referenced from ep_ble_init.o(i.ble_stack_init)
 <LI><a href="#[44]">tail_restore_state_run</a> from pstorage.o(i.tail_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[30]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[236]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[46]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[53]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[237]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[238]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[239]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[23a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[23b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[48]"></a>__asm___7_myiic_c_delay_us__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, myiic.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_myiic_c_delay_us__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_myiic_c_delay_us__nrf_delay_us
</UL>

<P><STRONG><a name="[49]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>

<P><STRONG><a name="[4a]"></a>__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>

<P><STRONG><a name="[4b]"></a>__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_link_core.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[23c]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetBatVol
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ChannelTableSet
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_send_packet_timeout_handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[23d]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Calc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_set_session_token
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_set_dyn_key
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetTxData
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_get_host_id
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_TX
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_RX
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_set_host_id
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_channel_table
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetRxData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
</UL>

<P><STRONG><a name="[15b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[23e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
</UL>

<P><STRONG><a name="[23f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_char_add
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATTERY_char_add
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCESS_char_add
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_char_add
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEER_char_add
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInfo_char_add
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[17a]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
</UL>

<P><STRONG><a name="[1b4]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_validate_id
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_GetAngle
</UL>

<P><STRONG><a name="[5c]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_GetAngle
</UL>

<P><STRONG><a name="[242]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_GetAngle
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_GetAngle
</UL>

<P><STRONG><a name="[243]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[47]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[245]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>ACCESS_ble_init</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ep_ble_access.o(i.ACCESS_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ACCESS_ble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[56]"></a>ACCESS_service_init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, ep_ble_access.o(i.ACCESS_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ACCESS_service_init &rArr; ACCESS_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCESS_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[57]"></a>ADC_GetBatVol</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ep_powerswitch.o(i.ADC_GetBatVol))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_GetBatVol &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>ADC_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ep_powerswitch.o(i.ADC_init))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_Init
</UL>

<P><STRONG><a name="[58]"></a>AS5600_EnableWd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, as5600.o(i.AS5600_EnableWd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AS5600_EnableWd &rArr; AS5600_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_WriteOneByte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>AS5600_GetAngle</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, as5600.o(i.AS5600_GetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AS5600_GetAngle &rArr; AS5600_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>AS5600_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, as5600.o(i.AS5600_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AS5600_GetStatus &rArr; AS5600_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[1ca]"></a>AS5600_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, as5600.o(i.AS5600_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>AS5600_ReadOneByte</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, as5600.o(i.AS5600_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AS5600_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_SetPMMode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_SetOutputStage
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_GetAngle
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_EnableWd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_GetStatus
</UL>

<P><STRONG><a name="[65]"></a>AS5600_SetOutputStage</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, as5600.o(i.AS5600_SetOutputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AS5600_SetOutputStage &rArr; AS5600_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_WriteOneByte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>AS5600_SetPMMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, as5600.o(i.AS5600_SetPMMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AS5600_SetPMMode &rArr; AS5600_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_WriteOneByte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>AS5600_WriteOneByte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, as5600.o(i.AS5600_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AS5600_WriteOneByte &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_SetPMMode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_SetOutputStage
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_EnableWd
</UL>

<P><STRONG><a name="[222]"></a>BATTERY_ble_init</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, ep_ble_battery.o(i.BATTERY_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BATTERY_ble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[69]"></a>BATTERY_service_init</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ep_ble_battery.o(i.BATTERY_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BATTERY_service_init &rArr; BATTERY_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATTERY_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[6a]"></a>BLE_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ep_ble_init.o(i.BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BLE_Init &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>BLE_ParamInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ep_ble_init.o(i.BLE_ParamInit))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[215]"></a>BLE_SetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_ble_init.o(i.BLE_SetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[74]"></a>BUTTON_Press</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ep_button.o(i.BUTTON_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BUTTON_Press
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_OffCountClear
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[181]"></a>BUTTON_Release</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ep_button.o(i.BUTTON_Release))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[76]"></a>BUTTON_UpdateKeyCounter</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ep_button.o(i.BUTTON_UpdateKeyCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BUTTON_UpdateKeyCounter &rArr; BUTTON_get_touch_type &rArr; LCD_Next_Menu_Config &rArr; LED_SysOff &rArr; LED_DisplayNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_get_touch_type
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>BUTTON_get_touch_type</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ep_button.o(i.BUTTON_get_touch_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BUTTON_get_touch_type &rArr; LCD_Next_Menu_Config &rArr; LED_SysOff &rArr; LED_DisplayNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_pressCountClear
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_UpdateKeyCounter
</UL>

<P><STRONG><a name="[79]"></a>BUTTON_pressCountClear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ep_button.o(i.BUTTON_pressCountClear))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_get_touch_type
</UL>

<P><STRONG><a name="[7a]"></a>BUZZER_Err</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, ep_buzzer.o(i.BUZZER_Err))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BUZZER_Err
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_On
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c8]"></a>BUZZER_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_buzzer.o(i.BUZZER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>BUZZER_Off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_buzzer.o(i.BUZZER_Off))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_onCheck
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Err
</UL>

<P><STRONG><a name="[7c]"></a>BUZZER_On</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_buzzer.o(i.BUZZER_On))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_onCheck
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Err
</UL>

<P><STRONG><a name="[db]"></a>BUZZER_beep_once</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ep_buzzer.o(i.BUZZER_beep_once))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
</UL>

<P><STRONG><a name="[d9]"></a>BUZZER_beep_twice</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ep_buzzer.o(i.BUZZER_beep_twice))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
</UL>

<P><STRONG><a name="[7d]"></a>CRPTY_HostIdReq_FailCheck</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ep_crypt_device.o(i.CRPTY_HostIdReq_FailCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CRPTY_HostIdReq_FailCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdRequest
</UL>

<P><STRONG><a name="[7f]"></a>CRYPT_CmdRequest</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ep_crypt_device.o(i.CRYPT_CmdRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CRYPT_CmdRequest &rArr; CRYPT_keyUpdate &rArr; gzp_crypt &rArr; gzp_xor_cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate_Prepare
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_TX
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_KeyUpdateFailCheck
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_req_send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetch_send
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRPTY_HostIdReq_FailCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>CRYPT_CmdSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_crypt_device.o(i.CRYPT_CmdSet))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_KeyUpdateFailCheck
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRPTY_HostIdReq_FailCheck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CommFailCheck
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_Decode
</UL>

<P><STRONG><a name="[86]"></a>CRYPT_CommFailCheck</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, ep_crypt_device.o(i.CRYPT_CommFailCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CRYPT_CommFailCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_GzllModeSend
</UL>

<P><STRONG><a name="[87]"></a>CRYPT_Decode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ep_crypt_device.o(i.CRYPT_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CRYPT_Decode &rArr; CRYPT_UserData_RX &rArr; gzp_crypt &rArr; gzp_xor_cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate_PrepareResp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_RX
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetchResp_process
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdSet
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>CRYPT_HostID_fetchResp_process</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ep_crypt_device.o(i.CRYPT_HostID_fetchResp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CRYPT_HostID_fetchResp_process &rArr; gzp_crypt &rArr; gzp_xor_cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_validate_id
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_select_key
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_set_host_id
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_Decode
</UL>

<P><STRONG><a name="[84]"></a>CRYPT_HostID_fetch_send</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ep_crypt_device.o(i.CRYPT_HostID_fetch_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CRYPT_HostID_fetch_send &rArr; gzp_crypt &rArr; gzp_xor_cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_select_key
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_add_validation_id
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdRequest
</UL>

<P><STRONG><a name="[83]"></a>CRYPT_HostID_req_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ep_crypt_device.o(i.CRYPT_HostID_req_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CRYPT_HostID_req_send &rArr; gzp_crypt_set_session_token
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_set_session_token
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdRequest
</UL>

<P><STRONG><a name="[1c7]"></a>CRYPT_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ep_crypt_device.o(i.CRYPT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>CRYPT_KeyUpdateFailCheck</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ep_crypt_device.o(i.CRYPT_KeyUpdateFailCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CRYPT_KeyUpdateFailCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdSet
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdRequest
</UL>

<P><STRONG><a name="[89]"></a>CRYPT_UserData_RX</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ep_crypt_device.o(i.CRYPT_UserData_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CRYPT_UserData_RX &rArr; gzp_crypt &rArr; gzp_xor_cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_validate_id
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_select_key
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_Decode
</UL>

<P><STRONG><a name="[82]"></a>CRYPT_UserData_TX</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ep_crypt_device.o(i.CRYPT_UserData_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CRYPT_UserData_TX &rArr; gzp_crypt &rArr; gzp_xor_cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_select_key
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_add_validation_id
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetTxData
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdRequest
</UL>

<P><STRONG><a name="[80]"></a>CRYPT_keyUpdate</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ep_crypt_device.o(i.CRYPT_keyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CRYPT_keyUpdate &rArr; gzp_crypt &rArr; gzp_xor_cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_set_dyn_key
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_select_key
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_add_validation_id
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdRequest
</UL>

<P><STRONG><a name="[85]"></a>CRYPT_keyUpdate_Prepare</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ep_crypt_device.o(i.CRYPT_keyUpdate_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRYPT_keyUpdate_Prepare &rArr; Gzll_SetTxData
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdRequest
</UL>

<P><STRONG><a name="[8c]"></a>CRYPT_keyUpdate_PrepareResp</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ep_crypt_device.o(i.CRYPT_keyUpdate_PrepareResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRYPT_keyUpdate_PrepareResp &rArr; gzp_crypt_set_session_token
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt_set_session_token
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_Decode
</UL>

<P><STRONG><a name="[96]"></a>Comm_CheckSum</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ep_comm.o(i.Comm_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Comm_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_PrepareTxData
</UL>

<P><STRONG><a name="[a0]"></a>Comm_ClearFailCnt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_comm.o(i.Comm_ClearFailCnt))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_device_tx_success
</UL>

<P><STRONG><a name="[98]"></a>Comm_DataTypeSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_comm.o(i.Comm_DataTypeSet))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_comm_RX_decode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_onCheck
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_UpdateSendData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[8a]"></a>Comm_Decode</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, ep_comm.o(i.Comm_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Comm_Decode &rArr; MOTOR_comm_RX_decode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_Wflag
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_CurHandle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_comm_RX_decode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetPairState
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetGzllAddr1
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetCommStatus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ReadPairState
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Backup_gzllAddr1
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_DataTypeSet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ClearFailCnt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_Decode
</UL>

<P><STRONG><a name="[a1]"></a>Comm_GzllModeSend</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ep_comm.o(i.Comm_GzllModeSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Comm_GzllModeSend &rArr; nrf_gzll_add_packet_to_tx_fifo &rArr; nrf_impl_put_tx_fifo &rArr; nrf_pm_put_tx_fifo &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Backup_PercentMax
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_Wflag
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_CurHandle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_SetMotStatus
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CommFailCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_radio_callback
</UL>

<P><STRONG><a name="[a5]"></a>Comm_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ep_comm.o(i.Comm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Comm_Init &rArr; gazell_sd_radio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_sd_radio_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ClearFailCnt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>Comm_PrepareTxData</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ep_comm.o(i.Comm_PrepareTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Comm_PrepareTxData &rArr; Comm_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>Comm_RS485ModeSend</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ep_comm.o(i.Comm_RS485ModeSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Comm_RS485ModeSend &rArr; THROTTLE_Backup_PercentMax &rArr; PSTORAGE_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Backup_PercentMax
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_Wflag
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_CurHandle
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SetTx
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>Comm_RS485_Check</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ep_comm.o(i.Comm_RS485_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Comm_RS485_Check &rArr; gazell_sd_radio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_sd_radio_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_BatUVcountClear
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>Comm_ReadState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_comm.o(i.Comm_ReadState))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_UpdateSendData
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_OffCountAdd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_send_packet_timeout_handler
</UL>

<P><STRONG><a name="[b1]"></a>Comm_TxDatSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_comm.o(i.Comm_TxDatSet))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_UpdateSendData
</UL>

<P><STRONG><a name="[af]"></a>Comm_UpdateSendData</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, ep_comm.o(i.Comm_UpdateSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Comm_UpdateSendData
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_GetPercent
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_GetDir
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetCommStatus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ReadPairState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ReadCommStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_TxDatSet
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ReadState
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_DataTypeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>DeviceInfo_ble_init</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, ep_ble_device_info.o(i.DeviceInfo_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DeviceInfo_ble_init &rArr; ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[b8]"></a>DeviceInfo_service_init</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ep_ble_device_info.o(i.DeviceInfo_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DeviceInfo_service_init &rArr; DeviceInfo_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInfo_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[b9]"></a>EventTimeOutCheckProcess</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ep_tick.o(i.EventTimeOutCheckProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EventTimeOutCheckProcess &rArr; LED_AllOff
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_SetState
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOTE_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>Gzll_Backup_gzllAddr1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ep_gzll.o(i.Gzll_Backup_gzllAddr1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gzll_Backup_gzllAddr1 &rArr; PSTORAGE_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[c1]"></a>Gzll_ChannelTableSet</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, ep_gzll.o(i.Gzll_ChannelTableSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Gzll_ChannelTableSet &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[c2]"></a>Gzll_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, ep_gzll.o(i.Gzll_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Gzll_Init &rArr; nrf_gzll_init &rArr; nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_xosc_ctl
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_tx_power
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslots_per_channel
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslot_period
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_max_tx_attempts
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_device_channel_selection_policy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_datarate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_channel_table
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_base_address_1
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_address_prefix_byte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ChannelTableSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_start
</UL>

<P><STRONG><a name="[d8]"></a>Gzll_PairTimeCountDown</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_PairTimeCountDown))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[1c6]"></a>Gzll_ParamInit</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_ParamInit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>Gzll_ReadCommStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_ReadCommStatus))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_UpdateSendData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[d7]"></a>Gzll_ReadCountDownSec</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_ReadCountDownSec))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[9a]"></a>Gzll_ReadPairState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_ReadPairState))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_UpdateSendData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[d2]"></a>Gzll_SetAddrState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_SetAddrState))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Update_gzllAddr1
</UL>

<P><STRONG><a name="[9f]"></a>Gzll_SetCommStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_SetCommStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_UpdateSendData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DataInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[de]"></a>Gzll_SetCountDownSec</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_SetCountDownSec))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
</UL>

<P><STRONG><a name="[99]"></a>Gzll_SetGzllAddr1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_SetGzllAddr1))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
</UL>

<P><STRONG><a name="[9b]"></a>Gzll_SetPairState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_gzll.o(i.Gzll_SetPairState))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[d0]"></a>Gzll_SetRxData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ep_gzll.o(i.Gzll_SetRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gzll_SetRxData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_device_tx_success
</UL>

<P><STRONG><a name="[92]"></a>Gzll_SetTxData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ep_gzll.o(i.Gzll_SetTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gzll_SetTxData
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate_Prepare
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_TX
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_req_send
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetch_send
</UL>

<P><STRONG><a name="[d1]"></a>Gzll_Update_gzllAddr1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ep_gzll.o(i.Gzll_Update_gzllAddr1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Gzll_Update_gzllAddr1 &rArr; PSTORAGE_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_CheckSum
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetAddrState
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_DataUdate
</UL>

<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>IIC_Ack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, myiic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[d5]"></a>IIC_NAck</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, myiic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[63]"></a>IIC_Read_Byte</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, myiic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
</UL>

<P><STRONG><a name="[61]"></a>IIC_Send_Byte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_WriteOneByte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
</UL>

<P><STRONG><a name="[60]"></a>IIC_Start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_WriteOneByte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
</UL>

<P><STRONG><a name="[64]"></a>IIC_Stop</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_WriteOneByte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[62]"></a>IIC_Wait_Ack</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_WriteOneByte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_ReadOneByte
</UL>

<P><STRONG><a name="[d6]"></a>LCD_GzllPairCountDown</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, ep_lcd_6kw.o(i.LCD_GzllPairCountDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GzllPairCountDown &rArr; PSTORAGE_set_CurHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_Wflag
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_CurHandle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetPairState
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetCommStatus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ReadPairState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ReadCommStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Backup_gzllAddr1
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_DataTypeSet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ClearFailCnt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetMenu
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetAddrState
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ReadCountDownSec
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_PairTimeCountDown
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
</UL>

<P><STRONG><a name="[1c3]"></a>LCD_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_lcd_6kw.o(i.LCD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>LCD_Next_Menu_Config</STRONG> (Thumb, 604 bytes, Stack size 24 bytes, ep_lcd_6kw.o(i.LCD_Next_Menu_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_Next_Menu_Config &rArr; LED_SysOff &rArr; LED_DisplayNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Backup_PercentMax
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_Wflag
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_CurHandle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetPairState
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetCommStatus
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ReadState
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_DataTypeSet
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_beep_twice
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_beep_once
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_cal_state
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_SetState
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_SetCalErrFlag
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_ReadCalErrFlag
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Cal_Next
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Backup_cal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SysOff
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetCountDownSec
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_get_touch_type
</UL>

<P><STRONG><a name="[ba]"></a>LCD_SetMenu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_lcd_6kw.o(i.LCD_SetMenu))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_comm_RX_decode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventTimeOutCheckProcess
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[bb]"></a>LED_AllOff</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, ep_led.o(i.LED_AllOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LED_AllOff
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_comm_RX_decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventTimeOutCheckProcess
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SysON
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Cal_Next
</UL>

<P><STRONG><a name="[e3]"></a>LED_AllOn</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, ep_led.o(i.LED_AllOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LED_AllOn
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SysOff
</UL>

<P><STRONG><a name="[e5]"></a>LED_Display</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, ep_led.o(i.LED_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Display &rArr; LCD_GzllPairCountDown &rArr; PSTORAGE_set_CurHandle
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ReadPairState
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ReadState
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_beep_twice
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_nBlink_Slow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_nBlink_Fast
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_blink
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayPosition
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayPercent
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOn
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>LED_DisplayNum</STRONG> (Thumb, 524 bytes, Stack size 4 bytes, ep_led.o(i.LED_DisplayNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LED_DisplayNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SysON
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SysOff
</UL>

<P><STRONG><a name="[e6]"></a>LED_DisplayPercent</STRONG> (Thumb, 466 bytes, Stack size 4 bytes, ep_led.o(i.LED_DisplayPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LED_DisplayPercent &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
</UL>

<P><STRONG><a name="[ea]"></a>LED_DisplayPosition</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ep_led.o(i.LED_DisplayPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_DisplayPosition
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_ON
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
</UL>

<P><STRONG><a name="[e2]"></a>LED_OFF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_led.o(i.LED_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayPosition
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayPercent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayNum
</UL>

<P><STRONG><a name="[e4]"></a>LED_ON</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_led.o(i.LED_ON))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayPosition
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayPercent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayNum
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOn
</UL>

<P><STRONG><a name="[ec]"></a>LED_SysON</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ep_led.o(i.LED_SysON))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_SysON &rArr; LED_DisplayNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayNum
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_onCheck
</UL>

<P><STRONG><a name="[da]"></a>LED_SysOff</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ep_led.o(i.LED_SysOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LED_SysOff &rArr; LED_DisplayNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayNum
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOn
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
</UL>

<P><STRONG><a name="[e8]"></a>LED_blink</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ep_led.o(i.LED_blink))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_blink
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
</UL>

<P><STRONG><a name="[1c9]"></a>LED_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ep_led.o(i.LED_init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>LED_nBlink_Fast</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ep_led.o(i.LED_nBlink_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_nBlink_Fast
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
</UL>

<P><STRONG><a name="[e7]"></a>LED_nBlink_Slow</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ep_led.o(i.LED_nBlink_Slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_nBlink_Slow
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
</UL>

<P><STRONG><a name="[ef]"></a>MOTOR_CheckStatus</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, ep_motor.o(i.MOTOR_CheckStatus))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_comm_RX_decode
</UL>

<P><STRONG><a name="[1c4]"></a>MOTOR_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_motor.o(i.MOTOR_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>MOTOR_Off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_motor.o(i.MOTOR_Off))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[11c]"></a>MOTOR_On</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_motor.o(i.MOTOR_On))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[11a]"></a>MOTOR_ReadMotorStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ep_motor.o(i.MOTOR_ReadMotorStatus))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[116]"></a>MOTOR_SetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_motor.o(i.MOTOR_SetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DataInit
</UL>

<P><STRONG><a name="[11e]"></a>MOTOR_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_motor.o(i.MOTOR_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[221]"></a>MOTOR_ble_init</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, ep_ble_motor.o(i.MOTOR_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MOTOR_ble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[97]"></a>MOTOR_comm_RX_decode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ep_motor.o(i.MOTOR_comm_RX_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MOTOR_comm_RX_decode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_DataTypeSet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_CheckStatus
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
</UL>

<P><STRONG><a name="[f0]"></a>MOTOR_service_init</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, ep_ble_motor.o(i.MOTOR_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MOTOR_service_init &rArr; MOTOR_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[a4]"></a>Motor_SetMotStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_motor.o(i.Motor_SetMotStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_GzllModeSend
</UL>

<P><STRONG><a name="[224]"></a>NAVIG_ble_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, ep_ble_navigation.o(i.NAVIG_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NAVIG_ble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[f1]"></a>NAVIG_service_init</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, ep_ble_navigation.o(i.NAVIG_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NAVIG_service_init &rArr; ble_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[f3]"></a>NRF_ASSERT_INTERNAL_parse_and_forward</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_assert_internal.o(i.NRF_ASSERT_INTERNAL_parse_and_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_assert_internal_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_mode
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_prefix_byte
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable_rssi
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_free_packet
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_handler_rx_enable_start_tx_enable_start_disable
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_start_operation
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_prepare_operation
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_timeslot
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_channel_index
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[f5]"></a>NRF_flw_prepare_call</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, nrf_flywheel.o(i.NRF_flw_prepare_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[1c2]"></a>POWER_Disable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.POWER_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>PSTORAGE_CheckSum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ep_pstorage.o(i.PSTORAGE_CheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PSTORAGE_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Backup_PercentMax
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Backup_gzllAddr1
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Update_cal
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Update_PercentMax
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Backup_cal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Update_gzllAddr1
</UL>

<P><STRONG><a name="[f6]"></a>PSTORAGE_DataUdate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ep_pstorage.o(i.PSTORAGE_DataUdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PSTORAGE_DataUdate &rArr; PSTORAGE_Read &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Update_cal
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Update_PercentMax
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Update_gzllAddr1
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>PSTORAGE_Erase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ep_pstorage.o(i.PSTORAGE_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PSTORAGE_Erase &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_SaveData
</UL>

<P><STRONG><a name="[fc]"></a>PSTORAGE_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ep_pstorage.o(i.PSTORAGE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = PSTORAGE_Init &rArr; pstorage_register &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>PSTORAGE_Read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ep_pstorage.o(i.PSTORAGE_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PSTORAGE_Read &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_DataUdate
</UL>

<P><STRONG><a name="[101]"></a>PSTORAGE_SaveData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ep_pstorage.o(i.PSTORAGE_SaveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = PSTORAGE_SaveData &rArr; PSTORAGE_Erase &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_Wflag
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>PSTORAGE_Write</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ep_pstorage.o(i.PSTORAGE_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PSTORAGE_Write &rArr; pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_SaveData
</UL>

<P><STRONG><a name="[105]"></a>PSTORAGE_read_Wflag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_pstorage.o(i.PSTORAGE_read_Wflag))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_CloseSys
</UL>

<P><STRONG><a name="[9d]"></a>PSTORAGE_set_CurHandle</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ep_pstorage.o(i.PSTORAGE_set_CurHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PSTORAGE_set_CurHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_GzllModeSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485ModeSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_Off
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[9e]"></a>PSTORAGE_set_Wflag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_pstorage.o(i.PSTORAGE_set_Wflag))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_GzllModeSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_SaveData
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485ModeSend
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ps_cb_handler
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_Off
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GzllPairCountDown
</UL>

<P><STRONG><a name="[126]"></a>PercentFilter</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, ep_throttle.o(i.PercentFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PercentFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Calc
</UL>

<P><STRONG><a name="[ae]"></a>PowerSwitch_BatUVcountClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_powerswitch.o(i.PowerSwitch_BatUVcountClear))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485_Check
</UL>

<P><STRONG><a name="[104]"></a>PowerSwitch_CloseSys</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ep_powerswitch.o(i.PowerSwitch_CloseSys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerSwitch_CloseSys
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_read_Wflag
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_Off
</UL>

<P><STRONG><a name="[106]"></a>PowerSwitch_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ep_powerswitch.o(i.PowerSwitch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerSwitch_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>PowerSwitch_OffCountAdd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ep_powerswitch.o(i.PowerSwitch_OffCountAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerSwitch_OffCountAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_send_packet_timeout_handler
</UL>

<P><STRONG><a name="[75]"></a>PowerSwitch_OffCountClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_powerswitch.o(i.PowerSwitch_OffCountClear))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Press
</UL>

<P><STRONG><a name="[10c]"></a>PowerSwitch_OpenSys</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_powerswitch.o(i.PowerSwitch_OpenSys))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_onCheck
</UL>

<P><STRONG><a name="[119]"></a>PowerSwitch_ReadBatState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ep_powerswitch.o(i.PowerSwitch_ReadBatState))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[10a]"></a>PowerSwitch_offCheck</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ep_powerswitch.o(i.PowerSwitch_offCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PowerSwitch_offCheck &rArr; PowerSwitch_Off &rArr; THROTTLE_Backup_PercentMax &rArr; PSTORAGE_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10b]"></a>PowerSwitch_onCheck</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ep_powerswitch.o(i.PowerSwitch_onCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PowerSwitch_onCheck &rArr; LED_SysON &rArr; LED_DisplayNum &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_DataTypeSet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_On
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Off
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SysON
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_OpenSys
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>RADIO_IRQHandler</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, nrf_link_core.o(i.RADIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO_IRQHandler &rArr; nrf_lcore_handler_rx_enable_start_tx_enable_start_disable &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_handler_rx_enable_start_tx_enable_start_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_radio_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[223]"></a>STEER_ble_init</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, ep_ble_steer.o(i.STEER_ble_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = STEER_ble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[111]"></a>STEER_service_init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ep_ble_steer.o(i.STEER_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STEER_service_init &rArr; STEER_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEER_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[1b]"></a>SWI0_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, nrf_notification_manager.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.SWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SWI1_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>SYS_DataInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ep_sys.o(i.SYS_DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_DataInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetCommStatus
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[117]"></a>SYS_ErrCheck</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, ep_sys.o(i.SYS_ErrCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SYS_ErrCheck &rArr; AS5600_GetStatus &rArr; AS5600_ReadOneByte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ReadState
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_DataTypeSet
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_On
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Off
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_GetStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SetErrorCode
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DataInit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_ReadBatState
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Stop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_ReadMotorStatus
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_On
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Off
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_ReadCalErrFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>SYS_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ep_sys.o(i.SYS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ab]"></a>SYS_ReadMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ep_sys.o(i.SYS_ReadMode))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_send_packet_timeout_handler
</UL>

<P><STRONG><a name="[118]"></a>SYS_SetErrorCode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_sys.o(i.SYS_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[1ac]"></a>SysTimer1Start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_tick.o(i.SysTimer1Start))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_send_packet_timeout_handler
</UL>

<P><STRONG><a name="[1ad]"></a>SysTimer1Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_tick.o(i.SysTimer1Stop))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_send_packet_timeout_handler
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_nrf51.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_peripheral_domain_setup_needed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_manual_peripheral_setup_needed
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_disabled_in_debug_needed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[1cb]"></a>Systick_Init</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ep_tick.o(i.Systick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>THROTTLE_Backup_PercentMax</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ep_throttle.o(i.THROTTLE_Backup_PercentMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = THROTTLE_Backup_PercentMax &rArr; PSTORAGE_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_GzllModeSend
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485ModeSend
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_Off
</UL>

<P><STRONG><a name="[e1]"></a>THROTTLE_Backup_cal</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ep_throttle.o(i.THROTTLE_Backup_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = THROTTLE_Backup_cal &rArr; PSTORAGE_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
</UL>

<P><STRONG><a name="[123]"></a>THROTTLE_CalErrCheck</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, ep_throttle.o(i.THROTTLE_CalErrCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = THROTTLE_CalErrCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_SetCalErrFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Update_cal
</UL>

<P><STRONG><a name="[e0]"></a>THROTTLE_Cal_Next</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, ep_throttle.o(i.THROTTLE_Cal_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = THROTTLE_Cal_Next &rArr; LED_AllOff
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_cal_state
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_SetCalErrFlag
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_AllOff
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_SaveLimitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
</UL>

<P><STRONG><a name="[125]"></a>THROTTLE_Calc</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, ep_throttle.o(i.THROTTLE_Calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = THROTTLE_Calc &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_SetCalErrFlag
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PercentFilter
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>THROTTLE_GetDir</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ep_throttle.o(i.THROTTLE_GetDir))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_UpdateSendData
</UL>

<P><STRONG><a name="[b3]"></a>THROTTLE_GetPercent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_throttle.o(i.THROTTLE_GetPercent))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_UpdateSendData
</UL>

<P><STRONG><a name="[127]"></a>THROTTLE_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ep_throttle.o(i.THROTTLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = THROTTLE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_SetCalErrFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>THROTTLE_Off</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ep_throttle.o(i.THROTTLE_Off))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[11b]"></a>THROTTLE_On</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ep_throttle.o(i.THROTTLE_On))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[df]"></a>THROTTLE_ReadCalErrFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_throttle.o(i.THROTTLE_ReadCalErrFlag))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
</UL>

<P><STRONG><a name="[124]"></a>THROTTLE_SaveLimitValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ep_throttle.o(i.THROTTLE_SaveLimitValue))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Cal_Next
</UL>

<P><STRONG><a name="[dd]"></a>THROTTLE_SetCalErrFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_throttle.o(i.THROTTLE_SetCalErrFlag))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Calc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Update_cal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Cal_Next
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_CalErrCheck
</UL>

<P><STRONG><a name="[bc]"></a>THROTTLE_SetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ep_throttle.o(i.THROTTLE_SetState))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventTimeOutCheckProcess
</UL>

<P><STRONG><a name="[f9]"></a>THROTTLE_Update_PercentMax</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ep_throttle.o(i.THROTTLE_Update_PercentMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = THROTTLE_Update_PercentMax &rArr; PSTORAGE_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_CheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_DataUdate
</UL>

<P><STRONG><a name="[f8]"></a>THROTTLE_Update_cal</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ep_throttle.o(i.THROTTLE_Update_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = THROTTLE_Update_cal &rArr; PSTORAGE_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_SetCalErrFlag
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_CheckSum
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_CalErrCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_DataUdate
</UL>

<P><STRONG><a name="[dc]"></a>THROTTLE_cal_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ep_throttle.o(i.THROTTLE_cal_state))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Next_Menu_Config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Cal_Next
</UL>

<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ep_tick.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER1_IRQHandler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_flywheel.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER2_IRQHandler &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UART0_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ep_comm.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART0_IRQHandler &rArr; Comm_Decode &rArr; MOTOR_comm_RX_decode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Decode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SetRx
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>WDT_Feed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ep_wdt.o(i.WDT_Feed))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>WDT_Init</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ep_wdt.o(i.WDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_ReadWdtRunStatues
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>WDT_ReadWdtRunStatues</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ep_wdt.o(i.WDT_ReadWdtRunStatues))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
</UL>

<P><STRONG><a name="[88]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ep_crypt_device.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_comm_RX_decode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_Decode
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayPercent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_DisplayNum
</UL>

<P><STRONG><a name="[248]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[249]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[24a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[137]"></a>app_button_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_button.o(i.app_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_button_enable &rArr; nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[139]"></a>app_button_init</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, app_button.o(i.app_button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_init
</UL>

<P><STRONG><a name="[113]"></a>app_error_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_error.o(i.app_error_handler))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>app_timer_create</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_timer_ble_gzll.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
</UL>

<P><STRONG><a name="[141]"></a>app_timer_init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, app_timer_ble_gzll.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timers_init
</UL>

<P><STRONG><a name="[6e]"></a>app_timer_start</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, app_timer_ble_gzll.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[147]"></a>app_timer_stop</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
</UL>

<P><STRONG><a name="[2f]"></a>async_state_packet_received</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, nrf_impala.o(i.async_state_packet_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = async_state_packet_received &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_rx_fifo_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(i.async_state_rx_enabling)
</UL>
<P><STRONG><a name="[14e]"></a>async_state_rx_enabling</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, nrf_impala.o(i.async_state_rx_enabling))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = async_state_rx_enabling &rArr; nrf_pm_start_prx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_get_remaining_space_in_notification_queue
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_start_operation
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_prepare_operation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_tx_ack_complete
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
</UL>

<P><STRONG><a name="[2e]"></a>async_state_tx_ack_complete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_impala.o(i.async_state_tx_ack_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = async_state_tx_ack_complete &rArr; async_state_rx_enabling &rArr; nrf_pm_start_prx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(i.async_state_packet_received)
</UL>
<P><STRONG><a name="[154]"></a>ble_access_on_ble_evt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ep_ble_access.o(i.ble_access_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_access_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[12d]"></a>ble_access_string_send</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ep_ble_access.o(i.ble_access_string_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_access_string_send
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_data_handler
</UL>

<P><STRONG><a name="[158]"></a>ble_advdata_set</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[136]"></a>ble_advertising_init</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[15d]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[15e]"></a>ble_advertising_start</STRONG> (Thumb, 478 bytes, Stack size 48 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_address_exists
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_peer_address_clear
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[162]"></a>ble_battery_on_ble_evt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ep_ble_battery.o(i.ble_battery_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_battery_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[166]"></a>ble_conn_params_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_init
</UL>

<P><STRONG><a name="[167]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[16c]"></a>ble_device_info_on_ble_evt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ep_ble_device_info.o(i.ble_device_info_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_device_info_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[170]"></a>ble_motor_on_ble_evt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ep_ble_motor.o(i.ble_motor_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_motor_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[171]"></a>ble_navig_on_ble_evt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ep_ble_navigation.o(i.ble_navig_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_navig_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[21b]"></a>ble_notif_en_check</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ep_ble_init.o(i.ble_notif_en_check))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[b6]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInfo_ble_init
</UL>

<P><STRONG><a name="[172]"></a>ble_steer_on_ble_evt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ep_ble_steer.o(i.ble_steer_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_steer_on_ble_evt &rArr; on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[6f]"></a>button_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ep_button.o(i.button_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = button_init &rArr; app_button_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[67]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SysON
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SysOff
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_WriteOneByte
</UL>

<P><STRONG><a name="[d4]"></a>delay_us</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, myiic.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___7_myiic_c_delay_us__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[a8]"></a>gazell_sd_radio_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ep_timeslot.o(i.gazell_sd_radio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gazell_sd_radio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_configure_next_event_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485_Check
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Init
</UL>

<P><STRONG><a name="[91]"></a>gzp_add_validation_id</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_gzp.o(i.gzp_add_validation_id))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_TX
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetch_send
</UL>

<P><STRONG><a name="[8e]"></a>gzp_crypt</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, nrf_gzp.o(i.gzp_crypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = gzp_crypt &rArr; gzp_xor_cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_get_host_id
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_xor_cipher
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_TX
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_RX
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetch_send
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetchResp_process
</UL>

<P><STRONG><a name="[8d]"></a>gzp_crypt_select_key</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_gzp.o(i.gzp_crypt_select_key))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_TX
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_RX
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetch_send
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetchResp_process
</UL>

<P><STRONG><a name="[95]"></a>gzp_crypt_set_dyn_key</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_gzp.o(i.gzp_crypt_set_dyn_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gzp_crypt_set_dyn_key
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate
</UL>

<P><STRONG><a name="[93]"></a>gzp_crypt_set_session_token</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_gzp.o(i.gzp_crypt_set_session_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gzp_crypt_set_session_token
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_keyUpdate_PrepareResp
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_req_send
</UL>

<P><STRONG><a name="[1b2]"></a>gzp_get_host_id</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ep_crypt_device.o(i.gzp_get_host_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gzp_get_host_id
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt
</UL>

<P><STRONG><a name="[8f]"></a>gzp_validate_id</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_gzp.o(i.gzp_validate_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gzp_validate_id &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_UserData_RX
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetchResp_process
</UL>

<P><STRONG><a name="[1b3]"></a>gzp_xor_cipher</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_gzp.o(i.gzp_xor_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gzp_xor_cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gzp_crypt
</UL>

<P><STRONG><a name="[114]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = intern_softdevice_events_execute
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[21f]"></a>m_configure_next_event</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ep_timeslot.o(i.m_configure_next_event))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_next
</UL>

<P><STRONG><a name="[1aa]"></a>m_configure_next_event_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ep_timeslot.o(i.m_configure_next_event_init))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gazell_sd_radio_init
</UL>

<P><STRONG><a name="[35]"></a>m_radio_callback</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, ep_timeslot.o(i.m_radio_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = m_radio_callback &rArr; m_on_start &rArr; Gzll_Init &rArr; nrf_gzll_init &rArr; nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_GzllModeSend
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_mode
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_start
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_multitimer
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ep_timeslot.o(i.gazell_sd_radio_init)
</UL>
<P><STRONG><a name="[21]"></a>main</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; BLE_Init &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;request_next
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Feed
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Calc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ErrCheck
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_onCheck
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_offCheck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_read_Wflag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_SaveData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_DataUdate
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Display
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_ParamInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventTimeOutCheckProcess
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_UpdateSendData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485_Check
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485ModeSend
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_PrepareTxData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_Decode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_CmdRequest
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Err
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_UpdateKeyCounter
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_SetPMMode
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_SetOutputStage
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_GetAngle
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AS5600_EnableWd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetBatVol
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[36]"></a>notification_cb</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, nrf_gzll.o(i.notification_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = notification_cb &rArr; nrf_gzll_device_tx_success &rArr; nrf_gzll_fetch_packet_from_rx_fifo &rArr; nrf_impl_pop_rx_fifo &rArr; nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_host_rx_data_ready
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_disabled
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_device_tx_success
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_device_tx_failed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_mode_changed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_is_disabled
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_free_packet
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_disable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_gzll.o(i.nrf_gzll_init)
</UL>
<P><STRONG><a name="[f4]"></a>nrf_assert_internal_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_gzll.o(i.nrf_assert_internal_callback))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>

<P><STRONG><a name="[20b]"></a>nrf_chm_execute_single_tick</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_channel_manager.o(i.nrf_chm_execute_single_tick))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[1d5]"></a>nrf_chm_get_current_channel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_channel_manager.o(i.nrf_chm_get_current_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_chm_get_current_channel &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[19f]"></a>nrf_chm_get_current_channel_index</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_channel_manager.o(i.nrf_chm_get_current_channel_index))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[20d]"></a>nrf_chm_get_current_timeslot</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_channel_manager.o(i.nrf_chm_get_current_timeslot))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[1d6]"></a>nrf_chm_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_channel_manager.o(i.nrf_chm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_chm_init &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[1d7]"></a>nrf_chm_set_current_channel_index</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_channel_manager.o(i.nrf_chm_set_current_channel_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_chm_set_current_channel_index &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[1a0]"></a>nrf_chm_set_current_timeslot</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_channel_manager.o(i.nrf_chm_set_current_timeslot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_chm_set_current_timeslot &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[10d]"></a>nrf_delay_ms</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_onCheck
</UL>

<P><STRONG><a name="[1dc]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[138]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_enable
</UL>

<P><STRONG><a name="[13c]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[19a]"></a>nrf_drv_gpiote_in_is_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpiote_event_handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detection_delay_timeout_handler
</UL>

<P><STRONG><a name="[13b]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[13a]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_button_init
</UL>

<P><STRONG><a name="[1dd]"></a>nrf_fifo_free_packet</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, nrf_fifo.o(i.nrf_fifo_free_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fifo_free_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_free_packet
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[213]"></a>nrf_fifo_get_available_packet_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_fifo.o(i.nrf_fifo_get_available_packet_count))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_available_fifo_packets
</UL>

<P><STRONG><a name="[1de]"></a>nrf_fifo_get_packet_count</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fifo.o(i.nrf_fifo_get_packet_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_tx_fifo_status
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_rx_fifo_status
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[214]"></a>nrf_fifo_init</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, nrf_fifo.o(i.nrf_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_init
</UL>

<P><STRONG><a name="[1df]"></a>nrf_fifo_pop_packet</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_fifo.o(i.nrf_fifo_pop_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_pop_rx_fifo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[1e0]"></a>nrf_fifo_put_packet</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_fifo.o(i.nrf_fifo_put_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_fifo_put_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[1e1]"></a>nrf_fifo_read_packet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_fifo.o(i.nrf_fifo_read_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_fifo_read_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_read_rx_fifo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[1e2]"></a>nrf_fifo_reserve_packet</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, nrf_fifo.o(i.nrf_fifo_reserve_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_prx
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_reserve_packet
</UL>

<P><STRONG><a name="[1bb]"></a>nrf_flw_get_ext_capture_task</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_get_ext_capture_task))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
</UL>

<P><STRONG><a name="[210]"></a>nrf_flw_get_flw_call_event</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_get_flw_call_event))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[1af]"></a>nrf_flw_get_runstate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_get_runstate))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[1e3]"></a>nrf_flw_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_flywheel.o(i.nrf_flw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_flw_init &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[226]"></a>nrf_flw_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_start))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[1b0]"></a>nrf_flw_stop</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, nrf_flywheel.o(i.nrf_flw_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_flw_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[19b]"></a>nrf_flw_task_is_delayed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_flywheel.o(i.nrf_flw_task_is_delayed))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[a2]"></a>nrf_gzll_add_packet_to_tx_fifo</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, nrf_gzll.o(i.nrf_gzll_add_packet_to_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_gzll_add_packet_to_tx_fifo &rArr; nrf_impl_put_tx_fifo &rArr; nrf_pm_put_tx_fifo &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_reserve_packet
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_put_tx_fifo
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_fifo_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_available_fifo_packets
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_GzllModeSend
</UL>

<P><STRONG><a name="[1cf]"></a>nrf_gzll_device_tx_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_gzll.o(i.nrf_gzll_device_tx_failed))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[1ce]"></a>nrf_gzll_device_tx_success</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, ep_gzll.o(i.nrf_gzll_device_tx_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_gzll_device_tx_success &rArr; nrf_gzll_fetch_packet_from_rx_fifo &rArr; nrf_impl_pop_rx_fifo &rArr; nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ClearFailCnt
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_SetRxData
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[1d1]"></a>nrf_gzll_disabled</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_gzll.o(i.nrf_gzll_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[cf]"></a>nrf_gzll_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_gzll_enable &rArr; nrf_impl_enable &rArr; m_nrf_impl_restore_all_hw_params &rArr; nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[1e9]"></a>nrf_gzll_fetch_packet_from_rx_fifo</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nrf_gzll.o(i.nrf_gzll_fetch_packet_from_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_gzll_fetch_packet_from_rx_fifo &rArr; nrf_impl_pop_rx_fifo &rArr; nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_read_rx_fifo
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_pop_rx_fifo
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_free_packet
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_device_tx_success
</UL>

<P><STRONG><a name="[1be]"></a>nrf_gzll_get_mode</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_get_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gzll_get_mode &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_mode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_multitimer
</UL>

<P><STRONG><a name="[1d0]"></a>nrf_gzll_host_rx_data_ready</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_gzll.o(i.nrf_gzll_host_rx_data_ready))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[c3]"></a>nrf_gzll_init</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, nrf_gzll.o(i.nrf_gzll_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nrf_gzll_init &rArr; nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_xosc_ctl
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_tx_power
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_datarate
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_selection_policy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_base_address_length
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable_rssi
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[1d2]"></a>nrf_gzll_mode_changed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_gzll.o(i.nrf_gzll_mode_changed))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[c4]"></a>nrf_gzll_set_address_prefix_byte</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_address_prefix_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gzll_set_address_prefix_byte &rArr; nrf_impl_set_prefix_byte &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_prefix_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[c9]"></a>nrf_gzll_set_base_address_1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_base_address_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_gzll_set_base_address_1 &rArr; nrf_impl_set_pipes_1_to_7_base_address
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_pipes_1_to_7_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[ca]"></a>nrf_gzll_set_channel_table</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_channel_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_gzll_set_channel_table &rArr; nrf_impl_set_channel_table &rArr; nrf_chm_set_current_channel_index &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_table
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[c7]"></a>nrf_gzll_set_datarate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_datarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gzll_set_datarate &rArr; nrf_impl_set_datarate
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_datarate
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[ce]"></a>nrf_gzll_set_device_channel_selection_policy</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_device_channel_selection_policy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_device_channel_selection_policy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_channel_selection_policy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[c6]"></a>nrf_gzll_set_max_tx_attempts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_max_tx_attempts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_max_tx_attempts
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_max_allowed_tx_attempts
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[1bf]"></a>nrf_gzll_set_mode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nrf_gzll_set_mode &rArr; nrf_impl_set_mode &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_radio_callback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_start
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_multitimer
</UL>

<P><STRONG><a name="[c8]"></a>nrf_gzll_set_timeslot_period</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_timeslot_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_timeslot_period
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_timeslot_period
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[cb]"></a>nrf_gzll_set_timeslots_per_channel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_timeslots_per_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gzll_set_timeslots_per_channel &rArr; nrf_impl_set_timeslots_per_channel_when_in_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_timeslots_per_channel_when_in_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[cd]"></a>nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync &rArr; nrf_impl_set_timeslots_per_channel_when_out_of_sync
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_timeslots_per_channel_when_out_of_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[c5]"></a>nrf_gzll_set_tx_power</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_tx_power
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[cc]"></a>nrf_gzll_set_xosc_ctl</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_gzll.o(i.nrf_gzll_set_xosc_ctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gzll_set_xosc_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_xosc_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
</UL>

<P><STRONG><a name="[1d4]"></a>nrf_impl_disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_impl_disable &rArr; sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[1ea]"></a>nrf_impl_enable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_impala.o(i.nrf_impl_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_impl_enable &rArr; m_nrf_impl_restore_all_hw_params &rArr; nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_get_current_state
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_enable
</UL>

<P><STRONG><a name="[1f6]"></a>nrf_impl_enable_rssi</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_enable_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_enable_rssi &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[1cd]"></a>nrf_impl_free_packet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_free_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_impl_free_packet &rArr; nrf_pm_free_packet &rArr; nrf_fifo_free_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_free_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[1e6]"></a>nrf_impl_get_available_fifo_packets</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_get_available_fifo_packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_get_available_fifo_packets &rArr; nrf_pm_get_available_fifo_packets
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_available_fifo_packets
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[1ed]"></a>nrf_impl_get_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_mode
</UL>

<P><STRONG><a name="[1e5]"></a>nrf_impl_get_rx_fifo_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_get_rx_fifo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_get_rx_fifo_status &rArr; nrf_pm_get_rx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_rx_fifo_status
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[1e4]"></a>nrf_impl_get_tx_fifo_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_get_tx_fifo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_get_tx_fifo_status &rArr; nrf_pm_get_tx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_tx_fifo_status
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[1ee]"></a>nrf_impl_init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, nrf_impala.o(i.nrf_impl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_set_dyn_ack_status
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[1d3]"></a>nrf_impl_is_disabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_is_disabled))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notification_cb
</UL>

<P><STRONG><a name="[1ec]"></a>nrf_impl_pop_rx_fifo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_pop_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_impl_pop_rx_fifo &rArr; nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_pop_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[1e8]"></a>nrf_impl_put_tx_fifo</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_put_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_impl_put_tx_fifo &rArr; nrf_pm_put_tx_fifo &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[1eb]"></a>nrf_impl_read_rx_fifo</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_read_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_read_rx_fifo &rArr; nrf_pm_read_rx_fifo &rArr; nrf_fifo_read_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_read_rx_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_fetch_packet_from_rx_fifo
</UL>

<P><STRONG><a name="[1e7]"></a>nrf_impl_reserve_packet</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_reserve_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_impl_reserve_packet &rArr; nrf_pm_reserve_packet &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_reserve_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_add_packet_to_tx_fifo
</UL>

<P><STRONG><a name="[1f1]"></a>nrf_impl_set_base_address_length</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_base_address_length))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[1f2]"></a>nrf_impl_set_channel_selection_policy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_channel_selection_policy))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_device_channel_selection_policy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[1ef]"></a>nrf_impl_set_channel_table</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_impala.o(i.nrf_impl_set_channel_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_set_channel_table &rArr; nrf_chm_set_current_channel_index &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_channel_index
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_channel_table
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[1f4]"></a>nrf_impl_set_datarate</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_set_datarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_impl_set_datarate
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_datarate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[1f9]"></a>nrf_impl_set_max_allowed_tx_attempts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_max_allowed_tx_attempts))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_max_tx_attempts
</UL>

<P><STRONG><a name="[1f0]"></a>nrf_impl_set_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, nrf_impala.o(i.nrf_impl_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_impl_set_mode &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_mode
</UL>

<P><STRONG><a name="[1f8]"></a>nrf_impl_set_pipes_1_to_7_base_address</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, nrf_impala.o(i.nrf_impl_set_pipes_1_to_7_base_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_impl_set_pipes_1_to_7_base_address
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_base_address_1
</UL>

<P><STRONG><a name="[1f7]"></a>nrf_impl_set_prefix_byte</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, nrf_impala.o(i.nrf_impl_set_prefix_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_impl_set_prefix_byte &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_address_prefix_byte
</UL>

<P><STRONG><a name="[1fa]"></a>nrf_impl_set_timeslot_period</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_timeslot_period))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslot_period
</UL>

<P><STRONG><a name="[1fb]"></a>nrf_impl_set_timeslots_per_channel_when_in_sync</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, nrf_impala.o(i.nrf_impl_set_timeslots_per_channel_when_in_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_impl_set_timeslots_per_channel_when_in_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslots_per_channel
</UL>

<P><STRONG><a name="[1fc]"></a>nrf_impl_set_timeslots_per_channel_when_out_of_sync</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, nrf_impala.o(i.nrf_impl_set_timeslots_per_channel_when_out_of_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_impl_set_timeslots_per_channel_when_out_of_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_timeslots_per_channel_when_device_out_of_sync
</UL>

<P><STRONG><a name="[1f3]"></a>nrf_impl_set_tx_power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_tx_power))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_tx_power
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[1f5]"></a>nrf_impl_set_xosc_ctl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_impala.o(i.nrf_impl_set_xosc_ctl))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_xosc_ctl
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_init
</UL>

<P><STRONG><a name="[1]"></a>nrf_impl_state_fun_device_send_packet</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_impala.o(i.nrf_impl_state_fun_device_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_impl_state_fun_device_send_packet &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_start_operation
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_state_machine.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>nrf_impl_state_fun_timeslot_start</STRONG> (Thumb, 1200 bytes, Stack size 48 bytes, nrf_impala.o(i.nrf_impl_state_fun_timeslot_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = nrf_impl_state_fun_timeslot_start &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_there_is_ptx_packet_to_be_serviced
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_start_ptx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_pipe
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_packet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_ack_ptr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_get_remaining_space_in_notification_queue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_rx_address_match
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_prepare_operation
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_task_is_delayed
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_stop
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_runstate
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_flw_call_event
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_timeslot
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_channel_index
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_timeslot
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel_index
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_execute_single_tick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_state_machine.o(.data)
</UL>
<P><STRONG><a name="[14d]"></a>nrf_lcore_force_disable</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, nrf_link_core.o(i.nrf_lcore_force_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___15_nrf_link_core_c_b93f5dba__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
</UL>

<P><STRONG><a name="[1bc]"></a>nrf_lcore_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, nrf_link_core.o(i.nrf_lcore_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
</UL>

<P><STRONG><a name="[150]"></a>nrf_lcore_prepare_operation</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, nrf_link_core.o(i.nrf_lcore_prepare_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_prepare_operation &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[20c]"></a>nrf_lcore_rx_address_match</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_link_core.o(i.nrf_lcore_rx_address_match))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[151]"></a>nrf_lcore_start_operation</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, nrf_link_core.o(i.nrf_lcore_start_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_start_operation &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[14c]"></a>nrf_nm_add</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_notification_manager.o(i.nrf_nm_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_nm_add &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
</UL>

<P><STRONG><a name="[152]"></a>nrf_nm_get_remaining_space_in_notification_queue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_notification_manager.o(i.nrf_nm_get_remaining_space_in_notification_queue))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[202]"></a>nrf_nm_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_notification_manager.o(i.nrf_nm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_nm_init &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[14a]"></a>nrf_pm_end_prx</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, nrf_packet_manager.o(i.nrf_pm_end_prx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_free_packet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
</UL>

<P><STRONG><a name="[19c]"></a>nrf_pm_end_ptx</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, nrf_packet_manager.o(i.nrf_pm_end_ptx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_pm_end_ptx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
</UL>

<P><STRONG><a name="[1ff]"></a>nrf_pm_free_packet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_free_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_pm_free_packet &rArr; nrf_fifo_free_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_free_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_free_packet
</UL>

<P><STRONG><a name="[200]"></a>nrf_pm_get_available_fifo_packets</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_get_available_fifo_packets))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_pm_get_available_fifo_packets
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_available_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_available_fifo_packets
</UL>

<P><STRONG><a name="[20f]"></a>nrf_pm_get_current_ptx_ack_ptr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_get_current_ptx_ack_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[19d]"></a>nrf_pm_get_current_ptx_packet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_get_current_ptx_packet))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[19e]"></a>nrf_pm_get_current_ptx_pipe</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_get_current_ptx_pipe))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[14b]"></a>nrf_pm_get_rx_fifo_status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_get_rx_fifo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pm_get_rx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_rx_fifo_status
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_packet_received
</UL>

<P><STRONG><a name="[14f]"></a>nrf_pm_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_ack_received
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
</UL>

<P><STRONG><a name="[201]"></a>nrf_pm_get_tx_fifo_status</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_get_tx_fifo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pm_get_tx_fifo_status &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_get_tx_fifo_status
</UL>

<P><STRONG><a name="[203]"></a>nrf_pm_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_packet_manager.o(i.nrf_pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_pm_init &rArr; nrf_fifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[207]"></a>nrf_pm_pop_rx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_pop_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_pm_pop_rx_fifo &rArr; nrf_fifo_pop_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_pop_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_pop_rx_fifo
</UL>

<P><STRONG><a name="[208]"></a>nrf_pm_put_tx_fifo</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_packet_manager.o(i.nrf_pm_put_tx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_pm_put_tx_fifo &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_put_packet
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_available_packet_count
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_search_for_ptx_pipe_to_service
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_put_tx_fifo
</UL>

<P><STRONG><a name="[209]"></a>nrf_pm_read_rx_fifo</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_read_rx_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_pm_read_rx_fifo &rArr; nrf_fifo_read_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_read_rx_fifo
</UL>

<P><STRONG><a name="[20a]"></a>nrf_pm_reserve_packet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_packet_manager.o(i.nrf_pm_reserve_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_pm_reserve_packet &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_reserve_packet
</UL>

<P><STRONG><a name="[212]"></a>nrf_pm_search_for_ptx_pipe_to_service</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf_packet_manager.o(i.nrf_pm_search_for_ptx_pipe_to_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_put_tx_fifo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
</UL>

<P><STRONG><a name="[205]"></a>nrf_pm_set_dyn_ack_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_set_dyn_ack_status))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[153]"></a>nrf_pm_start_prx</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_packet_manager.o(i.nrf_pm_start_prx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pm_start_prx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;async_state_rx_enabling
</UL>

<P><STRONG><a name="[20e]"></a>nrf_pm_start_ptx</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, nrf_packet_manager.o(i.nrf_pm_start_ptx))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_pm_start_ptx &rArr; nrf_fifo_reserve_packet &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_reserve_packet
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_read_packet
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fifo_get_packet_count
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[211]"></a>nrf_pm_there_is_ptx_packet_to_be_serviced</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_packet_manager.o(i.nrf_pm_there_is_ptx_packet_to_be_serviced))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[37]"></a>nrf_sm_execute</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_state_machine.o(i.nrf_sm_execute))
<BR>[Address Reference Count : 3]<UL><LI> nrf_impala.o(i.nrf_impl_state_fun_device_send_packet)
<LI> nrf_impala.o(i.nrf_impl_state_fun_timeslot_start)
<LI> nrf_impala.o(i.sm_start)
</UL>
<P><STRONG><a name="[1fe]"></a>nrf_sm_get_current_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_state_machine.o(i.nrf_sm_get_current_state))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
</UL>

<P><STRONG><a name="[225]"></a>nrf_sm_get_next_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_state_machine.o(i.nrf_sm_get_next_state))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_start
</UL>

<P><STRONG><a name="[204]"></a>nrf_sm_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_state_machine.o(i.nrf_sm_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
</UL>

<P><STRONG><a name="[1b1]"></a>nrf_sm_set_next_state</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf_state_machine.o(i.nrf_sm_set_next_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_sm_set_next_state &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goto_disable
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_device_send_packet
</UL>

<P><STRONG><a name="[29]"></a>ps_cb_handler</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, ep_pstorage.o(i.ps_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ps_cb_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_Wflag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ep_pstorage.o(i.PSTORAGE_Init)
</UL>
<P><STRONG><a name="[15f]"></a>pstorage_access_status_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[ff]"></a>pstorage_block_identifier_get</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, pstorage.o(i.pstorage_block_identifier_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Init
</UL>

<P><STRONG><a name="[fb]"></a>pstorage_clear</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, pstorage.o(i.pstorage_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pstorage_clear &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Erase
</UL>

<P><STRONG><a name="[fd]"></a>pstorage_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = pstorage_init &rArr; pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Init
</UL>

<P><STRONG><a name="[100]"></a>pstorage_load</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, pstorage.o(i.pstorage_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Read
</UL>

<P><STRONG><a name="[fe]"></a>pstorage_register</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pstorage_register &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Init
</UL>

<P><STRONG><a name="[103]"></a>pstorage_store</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pstorage_store &rArr; cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_Write
</UL>

<P><STRONG><a name="[21e]"></a>pstorage_sys_event_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[1cc]"></a>request_next</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ep_timeslot.o(i.request_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = request_next
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_configure_next_event
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>softdevice_assertion_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_assertion_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_assertion_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[17c]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[17b]"></a>softdevice_handler_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[17d]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[1c1]"></a>start_timer</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ep_timeslot.o(i.start_timer))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_on_start
</UL>

<P><STRONG><a name="[32]"></a>sys_evt_dispatch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ep_ble_init.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sys_evt_dispatch &rArr; pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeslot_sys_event_handler
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_init.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[22f]"></a>timeslot_sys_event_handler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ep_timeslot.o(i.timeslot_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timeslot_sys_event_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3b]"></a>bsp_button_event_handler</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ep_button.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_button_event_handler &rArr; BUTTON_Press
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Release
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUTTON_Press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ep_button.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>RS485_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ep_comm.o(i.RS485_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485_Check
</UL>

<P><STRONG><a name="[a7]"></a>RS485_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ep_comm.o(i.RS485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RS485_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485_Check
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485ModeSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Init
</UL>

<P><STRONG><a name="[128]"></a>RS485_SetRx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ep_comm.o(i.RS485_SetRx))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>RS485_SetTx</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ep_comm.o(i.RS485_SetTx))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485ModeSend
</UL>

<P><STRONG><a name="[a6]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ep_comm.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_RS485_Check
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_Init
</UL>

<P><STRONG><a name="[90]"></a>gzp_set_host_id</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ep_crypt_device.o(i.gzp_set_host_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gzp_set_host_id
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRYPT_HostID_fetchResp_process
</UL>

<P><STRONG><a name="[108]"></a>PowerSwitch_Off</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ep_powerswitch.o(i.PowerSwitch_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PowerSwitch_Off &rArr; THROTTLE_Backup_PercentMax &rArr; PSTORAGE_CheckSum
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;THROTTLE_Backup_PercentMax
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_Wflag
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSTORAGE_set_CurHandle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_CloseSys
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_offCheck
</UL>

<P><STRONG><a name="[1bd]"></a>m_on_multitimer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ep_timeslot.o(i.m_on_multitimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = m_on_multitimer &rArr; nrf_gzll_set_mode &rArr; nrf_impl_set_mode &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_mode
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_radio_callback
</UL>

<P><STRONG><a name="[1c0]"></a>m_on_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ep_timeslot.o(i.m_on_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = m_on_start &rArr; Gzll_Init &rArr; nrf_gzll_init &rArr; nrf_impl_init &rArr; update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gzll_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gzll_set_mode
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_radio_callback
</UL>

<P><STRONG><a name="[54]"></a>ACCESS_char_add</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, ep_ble_access.o(i.ACCESS_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ACCESS_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCESS_service_init
</UL>

<P><STRONG><a name="[216]"></a>ACCESS_notif_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_ble_access.o(i.ACCESS_notif_disable))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[24]"></a>access_data_handler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ep_ble_access.o(i.access_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = access_data_handler &rArr; ble_access_string_send
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_access_string_send
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_compare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_access.o(i.ACCESS_ble_init)
</UL>
<P><STRONG><a name="[12c]"></a>key_compare</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ep_ble_access.o(i.key_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = key_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_data_handler
</UL>

<P><STRONG><a name="[156]"></a>on_connect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ep_ble_access.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_access_on_ble_evt
</UL>

<P><STRONG><a name="[157]"></a>on_disconnect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ep_ble_access.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCESS_notif_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_access_on_ble_evt
</UL>

<P><STRONG><a name="[155]"></a>on_write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ep_ble_access.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_notif_en_check
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_access_on_ble_evt
</UL>

<P><STRONG><a name="[68]"></a>BATTERY_char_add</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, ep_ble_battery.o(i.BATTERY_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BATTERY_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATTERY_service_init
</UL>

<P><STRONG><a name="[217]"></a>BATTERY_notif_disable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ep_ble_battery.o(i.BATTERY_notif_disable))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[25]"></a>battery_data_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_ble_battery.o(i.battery_data_handler))
<BR>[Address Reference Count : 2]<UL><LI> ep_ble_battery.o(i.BATTERY_ble_init)
<LI> ep_ble_battery.o(i.BATTERY_service_init)
</UL>
<P><STRONG><a name="[164]"></a>on_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_ble_battery.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_battery_on_ble_evt
</UL>

<P><STRONG><a name="[165]"></a>on_disconnect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ep_ble_battery.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATTERY_notif_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_battery_on_ble_evt
</UL>

<P><STRONG><a name="[163]"></a>on_write</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ep_ble_battery.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_notif_en_check
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_battery_on_ble_evt
</UL>

<P><STRONG><a name="[218]"></a>NAVIG_notif_disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ep_ble_navigation.o(i.NAVIG_notif_disable))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[f2]"></a>ble_char_add</STRONG> (Thumb, 246 bytes, Stack size 80 bytes, ep_ble_navigation.o(i.ble_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAVIG_service_init
</UL>

<P><STRONG><a name="[28]"></a>navig_data_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_ble_navigation.o(i.navig_data_handler))
<BR>[Address Reference Count : 2]<UL><LI> ep_ble_navigation.o(i.NAVIG_service_init)
<LI> ep_ble_navigation.o(i.NAVIG_ble_init)
</UL>
<P><STRONG><a name="[178]"></a>on_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_ble_navigation.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_navig_on_ble_evt
</UL>

<P><STRONG><a name="[179]"></a>on_disconnect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ep_ble_navigation.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAVIG_notif_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_navig_on_ble_evt
</UL>

<P><STRONG><a name="[177]"></a>on_write</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ep_ble_navigation.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_notif_en_check
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_navig_on_ble_evt
</UL>

<P><STRONG><a name="[72]"></a>advertising_init</STRONG> (Thumb, 96 bytes, Stack size 152 bytes, ep_ble_init.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[31]"></a>ble_evt_dispatch</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ep_ble_init.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ble_evt_dispatch &rArr; ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_navig_on_ble_evt
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_battery_on_ble_evt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_access_on_ble_evt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_steer_on_ble_evt
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_motor_on_ble_evt
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_info_on_ble_evt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_init.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[6c]"></a>ble_stack_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ep_ble_init.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_stack_init &rArr; softdevice_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[34]"></a>conn_params_error_handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ep_ble_init.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = conn_params_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_init.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[73]"></a>conn_params_init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ep_ble_init.o(i.conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = conn_params_init &rArr; ble_conn_params_init &rArr; app_timer_create
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[70]"></a>gap_params_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ep_ble_init.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gap_params_init
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[3a]"></a>gazell_send_packet_timeout_handler</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, ep_ble_init.o(i.gazell_send_packet_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gazell_send_packet_timeout_handler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comm_ReadState
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ReadMode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerSwitch_OffCountAdd
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer1Stop
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimer1Start
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_init.o(i.timers_init)
</UL>
<P><STRONG><a name="[2b]"></a>on_adv_evt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_ble_init.o(i.on_adv_evt))
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_init.o(i.advertising_init)
</UL>
<P><STRONG><a name="[173]"></a>on_ble_evt</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ep_ble_init.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = on_ble_evt &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[33]"></a>on_conn_params_evt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ep_ble_init.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_conn_params_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_init.o(i.conn_params_init)
</UL>
<P><STRONG><a name="[71]"></a>services_init</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, ep_ble_init.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = services_init &rArr; NAVIG_service_init &rArr; ble_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAVIG_service_init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAVIG_ble_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATTERY_service_init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATTERY_ble_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCESS_service_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACCESS_ble_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEER_service_init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEER_ble_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_service_init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_ble_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInfo_service_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInfo_ble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[6d]"></a>timers_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ep_ble_init.o(i.timers_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timers_init &rArr; app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_Init
</UL>

<P><STRONG><a name="[b7]"></a>DeviceInfo_char_add</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, ep_ble_device_info.o(i.DeviceInfo_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DeviceInfo_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInfo_service_init
</UL>

<P><STRONG><a name="[26]"></a>device_info_data_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_ble_device_info.o(i.device_info_data_handler))
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_device_info.o(i.DeviceInfo_ble_init)
</UL>
<P><STRONG><a name="[16e]"></a>on_connect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_ble_device_info.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_info_on_ble_evt
</UL>

<P><STRONG><a name="[16f]"></a>on_disconnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_ble_device_info.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_info_on_ble_evt
</UL>

<P><STRONG><a name="[16d]"></a>on_write</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_ble_device_info.o(i.on_write))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_info_on_ble_evt
</UL>

<P><STRONG><a name="[110]"></a>STEER_char_add</STRONG> (Thumb, 240 bytes, Stack size 80 bytes, ep_ble_steer.o(i.STEER_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = STEER_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEER_service_init
</UL>

<P><STRONG><a name="[219]"></a>STEER_notif_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_ble_steer.o(i.STEER_notif_disable))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[17f]"></a>on_connect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ep_ble_steer.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_steer_on_ble_evt
</UL>

<P><STRONG><a name="[180]"></a>on_disconnect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ep_ble_steer.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEER_notif_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_steer_on_ble_evt
</UL>

<P><STRONG><a name="[17e]"></a>on_write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ep_ble_steer.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_notif_en_check
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_steer_on_ble_evt
</UL>

<P><STRONG><a name="[2a]"></a>steer_data_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_ble_steer.o(i.steer_data_handler))
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_steer.o(i.STEER_ble_init)
</UL>
<P><STRONG><a name="[ee]"></a>MOTOR_char_add</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, ep_ble_motor.o(i.MOTOR_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MOTOR_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_service_init
</UL>

<P><STRONG><a name="[21a]"></a>MOTOR_notif_disable</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ep_ble_motor.o(i.MOTOR_notif_disable))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[27]"></a>motor_data_handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ep_ble_motor.o(i.motor_data_handler))
<BR>[Address Reference Count : 1]<UL><LI> ep_ble_motor.o(i.MOTOR_ble_init)
</UL>
<P><STRONG><a name="[175]"></a>on_connect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ep_ble_motor.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_motor_on_ble_evt
</UL>

<P><STRONG><a name="[176]"></a>on_disconnect</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ep_ble_motor.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = on_disconnect
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_notif_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_motor_on_ble_evt
</UL>

<P><STRONG><a name="[174]"></a>on_write</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ep_ble_motor.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = on_write
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_notif_en_check
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_motor_on_ble_evt
</UL>

<P><STRONG><a name="[ed]"></a>nrf_gpio_pin_toggle</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ep_led.o(i.nrf_gpio_pin_toggle))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_nBlink_Slow
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_nBlink_Fast
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_blink
</UL>

<P><STRONG><a name="[121]"></a>is_disabled_in_debug_needed</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf51.o(i.is_disabled_in_debug_needed))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[120]"></a>is_manual_peripheral_setup_needed</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf51.o(i.is_manual_peripheral_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[122]"></a>is_peripheral_domain_setup_needed</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_nrf51.o(i.is_peripheral_domain_setup_needed))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[12e]"></a>adv_data_encode</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[159]"></a>advdata_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advdata.o(i.advdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[130]"></a>appearance_encode</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[193]"></a>conn_int_check</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[133]"></a>conn_int_encode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[134]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = manuf_specific_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[12f]"></a>name_encode</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[135]"></a>service_data_encode</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_data_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[15a]"></a>srdata_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advdata.o(i.srdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[131]"></a>tx_power_level_encode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[149]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[132]"></a>uuid_list_encode</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[235]"></a>uuid_list_sized_encode</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[15c]"></a>ble_advertising_peer_address_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_peer_address_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_advertising_peer_address_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[160]"></a>peer_address_exists</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_advertising.o(i.peer_address_exists))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[161]"></a>whitelist_has_entries</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[194]"></a>conn_params_negotiation</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[195]"></a>is_conn_params_ok</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[16b]"></a>on_conn_params_update</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[169]"></a>on_connect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[16a]"></a>on_disconnect</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[168]"></a>on_write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[30]"></a>update_timeout_handler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[1db]"></a>channel_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[1da]"></a>channel_port_alloc</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[be]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[bf]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[1d8]"></a>pin_in_use_by_port</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[1d9]"></a>pin_in_use_by_te</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[13f]"></a>app_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pstorage.o(i.app_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[13e]"></a>app_notify_error_state_transit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pstorage.o(i.app_notify_error_state_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>

<P><STRONG><a name="[182]"></a>clear_operation_execute</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, pstorage.o(i.clear_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_operation_execute
</UL>

<P><STRONG><a name="[185]"></a>clear_post_processing_run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pstorage.o(i.clear_post_processing_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>

<P><STRONG><a name="[188]"></a>cmd_process</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pstorage.o(i.cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_dequeue
</UL>

<P><STRONG><a name="[18a]"></a>cmd_queue_dequeue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstorage.o(i.cmd_queue_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = cmd_queue_dequeue &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_idle_entry_run
</UL>

<P><STRONG><a name="[18d]"></a>cmd_queue_element_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pstorage.o(i.cmd_queue_element_init))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_init
</UL>

<P><STRONG><a name="[18b]"></a>cmd_queue_enqueue</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, pstorage.o(i.cmd_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cmd_queue_enqueue &rArr; cmd_process &rArr; update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[18c]"></a>cmd_queue_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pstorage.o(i.cmd_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_queue_init
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
</UL>

<P><STRONG><a name="[186]"></a>command_end_procedure_run</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pstorage.o(i.command_end_procedure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = command_end_procedure_run &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_queue_element_consume
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[18e]"></a>command_queue_element_consume</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pstorage.o(i.command_queue_element_consume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = command_queue_element_consume
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>

<P><STRONG><a name="[43]"></a>data_page_erase_state_run</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pstorage.o(i.data_page_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = data_page_erase_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>data_to_swap_write_state_run</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pstorage.o(i.data_to_swap_write_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = data_to_swap_write_state_run &rArr; swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>erase_sub_state_sm_run</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pstorage.o(i.erase_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[1a3]"></a>flash_api_err_code_process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pstorage.o(i.flash_api_err_code_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>

<P><STRONG><a name="[1a4]"></a>flash_operation_failure_run</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_failure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_operation_failure_run &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[1a5]"></a>flash_operation_success_run</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pstorage.o(i.flash_operation_success_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flash_operation_success_run &rArr; erase_sub_state_sm_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_sm_run
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[1a8]"></a>flash_page_erase</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.flash_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_erase_data_page_entry_run
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_entry_run
</UL>

<P><STRONG><a name="[1a9]"></a>flash_write</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[45]"></a>head_restore_state_run</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pstorage.o(i.head_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = head_restore_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>is_page_erase_required</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pstorage.o(i.is_page_erase_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_page_erase_required &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[1b5]"></a>is_tail_data_page_swap_required</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pstorage.o(i.is_tail_data_page_swap_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_tail_data_page_swap_required &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
</UL>

<P><STRONG><a name="[21c]"></a>is_word_aligned</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[1a2]"></a>main_state_err_busy_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pstorage.o(i.main_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main_state_err_busy_process &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
</UL>

<P><STRONG><a name="[21d]"></a>pstorage_flash_page_end</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pstorage.o(i.pstorage_flash_page_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pstorage_flash_page_end &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
</UL>

<P><STRONG><a name="[183]"></a>pstorage_flash_page_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_flash_page_size))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_tail_data_page_swap_required
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_word_size_calculate
</UL>

<P><STRONG><a name="[140]"></a>sm_state_change</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.sm_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_operation_execute
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_sub_state_sm_run
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_notify_error_state_transit
</UL>

<P><STRONG><a name="[229]"></a>state_data_erase_entry_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.state_data_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = state_data_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[22a]"></a>state_data_erase_swap_entry_run</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, pstorage.o(i.state_data_erase_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = state_data_erase_swap_entry_run &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[227]"></a>state_entry_action_run</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pstorage.o(i.state_entry_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_store_entry_run
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_idle_entry_run
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_entry_run
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[3e]"></a>state_erase_data_page_entry_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.state_erase_data_page_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = state_erase_data_page_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>state_idle_entry_run</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pstorage.o(i.state_idle_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = state_idle_entry_run &rArr; cmd_queue_dequeue &rArr;  cmd_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[40]"></a>state_restore_head_entry_run</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pstorage.o(i.state_restore_head_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = state_restore_head_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>state_restore_tail_entry_run</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pstorage.o(i.state_restore_tail_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = state_restore_tail_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[22c]"></a>state_store_entry_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.state_store_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_entry_action_run
</UL>

<P><STRONG><a name="[3c]"></a>state_swap_erase_entry_run</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pstorage.o(i.state_swap_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = state_swap_erase_entry_run &rArr; flash_page_erase &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_page_erase
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>state_write_data_swap_entry_run</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pstorage.o(i.state_write_data_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = state_write_data_swap_entry_run &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_end
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[22d]"></a>store_cmd_flash_write_execute</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pstorage.o(i.store_cmd_flash_write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_sub_state_sm_run
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_store_entry_run
</UL>

<P><STRONG><a name="[187]"></a>store_operation_execute</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pstorage.o(i.store_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>

<P><STRONG><a name="[1a6]"></a>store_sub_state_sm_run</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pstorage.o(i.store_sub_state_sm_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = store_sub_state_sm_run &rArr; main_state_err_busy_process &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_state_err_busy_process
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[41]"></a>swap_erase_state_run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pstorage.o(i.swap_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = swap_erase_state_run &rArr; swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>swap_sub_sm_exit_action_run</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_sm_exit_action_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_post_processing_run
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[22e]"></a>swap_sub_state_entry_action_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_entry_action_run))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>

<P><STRONG><a name="[199]"></a>swap_sub_state_err_busy_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_err_busy_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = swap_sub_state_err_busy_process &rArr; swap_sub_state_state_change
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[1a7]"></a>swap_sub_state_sm_run</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_sm_run))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[196]"></a>swap_sub_state_state_change</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pstorage.o(i.swap_sub_state_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_sub_state_state_change
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_entry_action_run
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_data_erase_swap_entry_run
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_failure_run
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[44]"></a>tail_restore_state_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pstorage.o(i.tail_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tail_restore_state_run &rArr; swap_sub_sm_exit_action_run &rArr; clear_post_processing_run &rArr; store_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_sm_exit_action_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>tail_word_size_calculate</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, pstorage.o(i.tail_word_size_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tail_word_size_calculate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_flash_page_size
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[189]"></a>update_operation_execute</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, pstorage.o(i.update_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = update_operation_execute &rArr; clear_operation_execute &rArr; sm_state_change &rArr; state_entry_action_run &rArr; state_store_entry_run &rArr; store_cmd_flash_write_execute &rArr; flash_write &rArr; flash_api_err_code_process &rArr; app_notify_error_state_transit &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[2d]"></a>detection_delay_timeout_handler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, app_button.o(i.detection_delay_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = detection_delay_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[2c]"></a>gpiote_event_handler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, app_button.o(i.gpiote_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = gpiote_event_handler &rArr; app_timer_start &rArr; timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_is_set
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_button.o(i.app_button_init)
</UL>
<P><STRONG><a name="[143]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_init
</UL>

<P><STRONG><a name="[18f]"></a>compare_reg_update</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, app_timer_ble_gzll.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check_sched
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_start
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[230]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, app_timer_ble_gzll.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[231]"></a>expired_timers_handler</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, app_timer_ble_gzll.o(i.expired_timers_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = expired_timers_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1b6]"></a>list_deletions_handler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, app_timer_ble_gzll.o(i.list_deletions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = list_deletions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1b8]"></a>list_insertions_handler</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, app_timer_ble_gzll.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[144]"></a>rtc1_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.rtc1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[191]"></a>rtc1_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.rtc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_start
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[142]"></a>rtc1_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___20_app_timer_ble_gzll_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[190]"></a>ticks_diff_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.ticks_diff_get))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[234]"></a>timeout_handler_exec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.timeout_handler_exec))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>

<P><STRONG><a name="[112]"></a>timer_list_handler</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, app_timer_ble_gzll.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired_timers_handler
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI1_IRQHandler
</UL>

<P><STRONG><a name="[233]"></a>timer_list_handler_sched</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.timer_list_handler_sched))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[1b9]"></a>timer_list_insert</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, app_timer_ble_gzll.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[1b7]"></a>timer_list_remove</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, app_timer_ble_gzll.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_deletions_handler
</UL>

<P><STRONG><a name="[146]"></a>timer_start_op_schedule</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, app_timer_ble_gzll.o(i.timer_start_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_start_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[148]"></a>timer_stop_op_schedule</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_stop_op_schedule &rArr; user_op_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[10f]"></a>timer_timeouts_check</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, app_timer_ble_gzll.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler_sched
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timeout_handler_exec
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticks_diff_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>timer_timeouts_check_sched</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.timer_timeouts_check_sched))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[145]"></a>user_id_get</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, app_timer_ble_gzll.o(i.user_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[232]"></a>user_op_alloc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_timer_ble_gzll.o(i.user_op_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_op_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_start_op_schedule
</UL>

<P><STRONG><a name="[38]"></a>device_ack_received</STRONG> (Thumb, 278 bytes, Stack size 40 bytes, nrf_impala.o(i.device_ack_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = device_ack_received &rArr; nrf_pm_end_ptx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_pipe
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_current_ptx_packet
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_task_is_delayed
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_set_current_timeslot
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_chm_get_current_channel_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_impala.o(i.nrf_impl_state_fun_timeslot_start)
</UL>
<P><STRONG><a name="[1ae]"></a>goto_disable</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, nrf_impala.o(i.goto_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = goto_disable &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_set_next_state
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_stop
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_runstate
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[1ba]"></a>m_nrf_impl_restore_all_hw_params</STRONG> (Thumb, 682 bytes, Stack size 24 bytes, nrf_impala.o(i.m_nrf_impl_restore_all_hw_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = m_nrf_impl_restore_all_hw_params &rArr; nrf_lcore_init &rArr; nrf_lcore_force_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_ext_capture_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_mode
</UL>

<P><STRONG><a name="[1fd]"></a>sm_start</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, nrf_impala.o(i.sm_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sm_start &rArr; NRF_flw_prepare_call &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sm_get_next_state
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_start
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_flw_get_runstate
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_flw_prepare_call
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_put_tx_fifo
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_enable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_disable
</UL>

<P><STRONG><a name="[206]"></a>update_mode</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, nrf_impala.o(i.update_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = update_mode &rArr; nrf_pm_end_prx &rArr; nrf_pm_search_for_ptx_pipe_to_service &rArr; nrf_fifo_get_packet_count &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_nrf_impl_restore_all_hw_params
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_get_state
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_ptx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_pm_end_prx
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nm_add
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_lcore_force_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_set_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_impl_state_fun_timeslot_start
</UL>

<P><STRONG><a name="[10e]"></a>nrf_lcore_handler_rx_enable_start_tx_enable_start_disable</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, nrf_link_core.o(i.nrf_lcore_handler_rx_enable_start_tx_enable_start_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_lcore_handler_rx_enable_start_tx_enable_start_disable &rArr; NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF_ASSERT_INTERNAL_parse_and_forward
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_IRQHandler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[228]"></a>assert_nrf_callback</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_assertion_handler
</UL>
<HR></body></html>
